version: "3.9"

volumes:
  db_data:

networks:
  backend:
  frontend:

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: backend
    tty: true
    environment:
      DATABASE_URL: ${DATABASE_URL}
      PORT: ${BACKEND_PORT}
      RUST_LOG: ${RUST_LOG}
      ALLOWED_ORIGIN: ${ALLOWED_ORIGIN}
      ENVIRONMENT: ${ENVIRONMENT}
    depends_on:
      - db
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - backend
      - frontend

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: base
    container_name: frontend
    environment:
      PORT: ${FRONTEND_PORT}
      NEXT_PUBLIC_GRAPHQL_ENDPOINT: ${GRAPHQL_ENDPOINT}
    tty: true
    volumes:
      - ./frontend/src:/usr/src/app/src
    depends_on:
      - backend
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    networks:
      - frontend
    command: yarn dev

  db:
    image: postgres:12-alpine
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_MULTIPLE_DATABASES: ${DATABASE_NAME},${DATABASE_NAME}_test
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./pg-init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${DATABASE_PORT}:5432"
    networks:
      - backend

  adminer:
    image: adminer:4-standalone
    restart: always
    environment:
      ADMINER_DESIGN: dracula
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      - db
    ports:
      - "${ADMINER_PORT}:8080"
    networks:
      - backend
